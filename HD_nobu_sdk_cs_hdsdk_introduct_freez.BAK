<div class="content-box mb-3 content-lighten">
  <h2><i class="fa fa-pencil-square-o fa-fw"></i>User.version.SDK よくあるフリーズ</h2>
</div>
<div class="content-box mb-3 content-lighten">
  <h3>よくあるフリーズのパターン</h3>
  <p>ここでは良くあるフリーズのパターンについて、<br>
    紹介します。<br>
  </p>
  <fieldset class="alert alert-warning">
    <legend>このページに記載されるのはフリーズするサンプル</legend> このページではよくあるフリーズと、その追い方を学ぶので、<br>
    サンプルを実行するとフリーズするものが大半です。<br>
  </fieldset>
</div>
<div class="content-box mb-3 content-lighten">
  <h3>よくあるフリーズの例①</h3>
  <p>圧倒的によくあるフリーズの例。<br>
    それは<span class="negative">「○○-&gt;配列[ix]」</span>のような、配列にアクセスする際、<br>
    ixの値をチェックしていないため、「配列外アクセスエラー」になり、即フリーズする、というものです。<br>
  </p>
  <fieldset class="code">
    <legend>１５３４年のシナリオを選択すると、上杉謙信が存在しないのでエラー</legend>
    <pre class="brush:csharp;">void 天翔記クラス::My_シナリオ選択直後(String^ シナリオファイル名) {
  // 長尾景虎の列伝の人物が存在しない場合、iBushouIDには0xFFFFが返ってくる。
  int iBushouID = 武将-&gt;Find_武将番号(列挙::武将::列伝番号::長尾景虎);

  // 配列は0～531の範囲でアクセスしなければならない。0xFFFFなど、範囲外でアクセスすると、即座にフリーズする。
  デバッグ出力 &lt;&lt; 武将-&gt;配列[iBushouID]-&gt;姓名 &lt;&lt; endl;
}
</pre>
  </fieldset>
</div>
<div class="content-box mb-3 content-lighten">
  <h3>try...catchで囲んで、エラーを出す。</h3>
  <p>上のようなフリーズの場合に行うのは、try ... catch で<br>
    イベントハンドラを囲む、というものです。<br>
  </p>
  <fieldset class="code">
    <legend>try...catchで囲み、エラーメッセージをModDebuggerに表示</legend>
    <pre class="brush:csharp;">void 天翔記クラス::My_シナリオ選択直後(String^ シナリオファイル名) {
  try {

    int iBushouID = 武将-&gt;Find_武将番号(列挙::武将::列伝番号::長尾景虎);

    デバッグ出力 &lt;&lt; 武将-&gt;配列[iBushouID]-&gt;姓名 &lt;&lt; endl;

  } catch (Exception^ e) {
    デバッグ出力 &lt;&lt; e-&gt;Message &lt;&lt; endl;
  }
}
</pre>
  </fieldset>
  <p><img src="./cnt_sdk/hd_version/cnt_sdk_introduct_freez_01.png"></p>
  <fieldset class="code">
    <legend>範囲を判定して正しく直した</legend>
    <pre class="brush:csharp;">void 天翔記クラス::My_シナリオ選択直後(String^ シナリオファイル名) {

  int iBushouID = 武将-&gt;Find_武将番号(列挙::武将::列伝番号::長尾景虎);

  if ( 0 &lt;= iBushouID &amp;&amp; iBushouID &lt; 武将-&gt;配列-&gt;Count ) {
    デバッグ出力 &lt;&lt; 武将-&gt;配列[iBushouID]-&gt;姓名 &lt;&lt; endl;
  }

}

</pre>
  </fieldset>
  <p>又、「○○-&gt;配列」の範囲内にあるのかないのかを調べるのは、<br>
    以下のように「Is_Contains」を利用できます。</p>
  <fieldset class="code">
    <legend>範囲を判定して正しく直した</legend>
    <pre class="brush:csharp;">void 天翔記クラス::My_シナリオ選択直後(String^ シナリオファイル名) {

  int iBushouID = 武将-&gt;Find_武将番号(列挙::武将::列伝番号::長尾景虎);

  // Is_Containsの「１番目の引数と２番目の引数」は、どちらが先でも後でもよい。
  if ( Is_Contains( iBushouID, 武将-&gt;配列 ) {
    デバッグ出力 &lt;&lt; 武将-&gt;配列[iBushouID]-&gt;姓名 &lt;&lt; endl;
  }

}

</pre>
  </fieldset>
</div>
<div class="content-box mb-3 content-lighten">
  <li>
    <h3>よくあるフリーズの例②</h3>
    <p>少し慣れてきたころによくある例、<br>
      それが、.NETではお馴染みの「gcnewしていないマネージ参照のプロパティに値を突っ込んでいる」というものです。<br>
    </p>
    <fieldset class="code">
      <legend>シナリオを選択すると、未初期化のposに値を突っ込んでるのでフリーズ</legend>
      <pre class="brush:csharp;">void 天翔記クラス::My_シナリオ選択直後(String^ シナリオファイル名) {

  // すべての城の位置は城位置型。
  城位置型^ pos;
  pos-&gt;Ｘ = 255;
  pos-&gt;Ｙ = 255;

  // 全ての城を見えないはるかに範囲外の右下にもっていく
  for each (auto c in 城-&gt;配列) {
    c-&gt;位置 = pos;
  }

}

</pre>
    </fieldset>
    <p>同様にtry...catchで囲むと、下記のようなエラーとなる。</p>
    <p><img src="./cnt_sdk/hd_version/cnt_sdk_introduct_freez_02.png"></p>
    <p>正しく直すには、gcnewする必要があります。<br></p>
    <fieldset class="code">
      <legend>gcnewして正しく直した</legend>
      <pre class="brush:csharp;highlight:[4]">void 天翔記クラス::My_シナリオ選択直後(String^ シナリオファイル名) {

  // すべての城の位置は城位置型。
  城位置型^ pos = gcnew 城位置型();
  pos-&gt;Ｘ = 255;
  pos-&gt;Ｙ = 255;

  // 全ての城を見えないはるかに範囲外の右下にもっていく
  for each (auto c in 城-&gt;配列) {
    c-&gt;位置 = pos;
  }

}
</pre>
    </fieldset>
  </li>
  <li>
    <h3>その他</h3>
    <p>以上が「よくあるフリーズ」の例となります。<br>
    </p>
  </li>
</div>